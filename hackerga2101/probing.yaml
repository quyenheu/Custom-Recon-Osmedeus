name: probing
desc: Probing HTTP Running and IP of target

report:
  final:
    - "{{Output}}/probing/dns-{{Workspace}}.txt"
    - "{{Output}}/probing/http-{{Workspace}}.txt"
    - "{{Output}}/probing/new-dns-{{Workspace}}.txt"
    - "{{Output}}/probing/permutation-{{Workspace}}.txt"
    - "{{Output}}/subdomain/final-{{Workspace}}.txt"

pre_run:
  - CreateFolder("{{Storages}}/summary/{{Workspace}}/")
  - CreateFolder("{{Output}}/probing")
  - CreateFolder("{{Output}}/ipspace")

params:
  - finalSubdomainFile: "{{Output}}/subdomain/final-{{Workspace}}.txt"
  - alterxSubdomainFile: "{{Output}}/subdomain/alterx-{{Workspace}}.txt"
  - alterxConfig: "{{Data}}/configs/alterx-permutation.yaml"
  - permDomainFile: "{{Output}}/probing/permutation-{{Workspace}}.txt"
  - rawFile: "{{Output}}/probing/raw-{{Workspace}}.txt"
  - customDnsWordlist: "{{Output}}/probing/customDnsWordlist-{{Workspace}}.txt"
  - permWordlists: "{{Data}}/wordlists/dns/altdns.txt"
  - bruteWordlist: "{{Data}}/wordlists/dns/medium.txt" # 114441 lines
  - resolvers: "{{Data}}/resolvers.txt"
  - dnsThreads: "3000"
  - httpThreads: "200"
  - dnsxThreads: "300"
  - massdnsRateBrute: "8000"
  - permLimit: "8000"
  - enablePermutation: "false"
  - dnsJsonFile: "{{Output}}/probing/dns-json-{{Workspace}}.txt"
  - dnsFile: "{{Output}}/probing/dns-{{Workspace}}.txt"
  - httpFile: "{{Output}}/probing/http-{{Workspace}}.txt"
  - ssTimeout: "2h"

steps:
  # check if we already scan before
  - conditions:
      - "FileLength('{{dnsFile}}') > 1"
    commands:
      - cp {{dnsFile}} {{Output}}/probing/bak-dns-{{Workspace}}.txt
      - cp {{httpFile}} {{Output}}/probing/bak-http-{{Workspace}}.txt
    scripts:
      # joining the old subdomains with a new one too
      - ExecCmd("cat {{Output}}/probing/subbrute-{{Workspace}}.txt >> {{finalSubdomainFile}}")
      - SortU("{{finalSubdomainFile}}")

  # build the custom wordlists based on the subdomain file
  - commands:
      - "cat {{finalSubdomainFile}} | {{Binaries}}/str-replace -d '.' -n | sort -u >> {{customDnsWordlist}}"
      - 'cat {{bruteWordlist}} >> {{customDnsWordlist}}'
    scripts:
      - "SortU('{{customDnsWordlist}}')"

  # simple bruteforce with main domain
  - required:
      - "{{Binaries}}/puredns"
      - "{{Binaries}}/massdns"
    commands:
      - '{{Binaries}}/puredns bruteforce {{customDnsWordlist}} {{Target}} -r {{resolvers}} --wildcard-tests 50 -w {{Output}}/probing/subbrute-{{Workspace}}.txt --rate-limit {{massdnsRateBrute}} --bin {{Binaries}}/massdns'
    scripts:
      - ExecCmd("cat {{Output}}/probing/subbrute-{{Workspace}}.txt >> {{finalSubdomainFile}}")
      - SortU("{{finalSubdomainFile}}")

  # generate simple permutation DNS when there is not too much domains
  - label: 'Generating permutation subdomains wordlists which might create a very big file'
    conditions:
      - "FileLength('{{finalSubdomainFile}}') <= {{permLimit}}"
      - '"{{enablePermutation}}" == "true"'
    commands:
      - 'cat {{finalSubdomainFile}} | {{Binaries}}/str-replace -W {{permWordlists}} -tld {{Target}} >> {{permDomainFile}}'
    scripts:
      - "SortU('{{permDomainFile}}')"

  # heu custom: add alterx
  - required:
      - "{{Binaries}}/alterx"
      - "{{Binaries}}/dnsx"
    commands:
      - "cat {{finalSubdomainFile}} | {{Binaries}}/alterx -en -silent -ac {{alterxConfig}}  | {{Binaries}}/dnsx -t {{dnsxThreads}} > {{alterxSubdomainFile}}"
    scripts:
      - Append("{{finalSubdomainFile}}", "{{alterxSubdomainFile}}")

  # actually resolving all the DNS
  - required:
      - "{{Binaries}}/puredns"
      - "{{Binaries}}/massdns"
    commands:
      - "{{Binaries}}/puredns resolve {{finalSubdomainFile}} -r {{resolvers}} --write {{Output}}/probing/nonwild-{{Workspace}}.txt --write-massdns {{dnsFile}} --write-wildcards {{Output}}/probing/wildcards-{{Workspace}}.txt --wildcard-tests 50 --rate-limit {{massdnsRateBrute}} --bin {{Binaries}}/massdns"
    scripts:
      - "SortU('{{dnsFile}}')"

  # probing for http
  - required:
      - "{{Binaries}}/httprobe"
    commands:
      - "cat {{permDomainFile}} {{finalSubdomainFile}} | sort -u | {{Binaries}}/httprobe -c {{httpThreads}} >> {{httpFile}}"
    scripts:
      - "SortU('{{httpFile}}')"
      # - "ExecCmd('rm -rf {{permDomainFile}}')"

  # get IP Address for later modules
  - required:
      - '{{dnsFile}}'
    commands:
      - cat '{{dnsFile}}' | grep ' A ' | awk '{print $3}' | sort -u >> {{Output}}/ipspace/{{Workspace}}-ip.txt
    scripts:
      - SortU("{{Output}}/ipspace/{{Workspace}}-ip.txt")

  ### Checking if we have new HTTP or DNS results
  # generate new dns 
  - conditions:
      - "FileLength('{{Output}}/probing/bak-dns-{{Workspace}}.txt') > 1"
    scripts:
      - ExecCmd("cat {{dnsFile}} | anew {{Output}}/probing/bak-dns-{{Workspace}}.txt > {{Output}}/probing/new-dns-{{Workspace}}.txt")
      - SortU("{{Output}}/probing/new-dns-{{Workspace}}.txt")
      - "Printf('New DNS detected: {{Output}}/probing/new-dns-{{Workspace}}.txt')"
  # generate new http 
  - conditions:
      - "FileLength('{{Output}}/probing/bak-http-{{Workspace}}.txt') > 1"
    scripts:
      - ExecCmd("cat {{httpFile}} | anew {{Output}}/probing/bak-http-{{Workspace}}.txt > {{Output}}/probing/new-http-{{Workspace}}.txt")
      - SortU("{{Output}}/probing/new-http-{{Workspace}}.txt")
      - "Printf('New HTTP detected: {{Output}}/probing/new-http-{{Workspace}}.txt')"

  ### for git storage only 
  # join with old result
  - required:
      - "{{httpFile}}"
    commands:
      - "cat {{httpFile}} >> {{Storages}}/summary/{{Workspace}}/http-{{Workspace}}.txt"
      - "cat {{dnsFile}} >> {{Storages}}/summary/{{Workspace}}/dns-{{Workspace}}.txt"
    scripts:
      - ExecCmd("cat {{Storages}}/summary/{{Workspace}}/http-{{Workspace}}.txt >> {{httpFile}}")
      - ExecCmd("cat {{Storages}}/summary/{{Workspace}}/dns-{{Workspace}}.txt >> {{dnsFile}}")
      - SortU("{{Storages}}/summary/{{Workspace}}/http-{{Workspace}}.txt")
      - SortU("{{Storages}}/summary/{{Workspace}}/dns-{{Workspace}}.txt")
      - SortU("{{dnsFile}}")
      - SortU("{{httpFile}}")

post_run:
  - TotalSubdomain('{{Output}}/probing/nonwild-{{Workspace}}.txt')
  - TotalDns('{{dnsFile}}')
